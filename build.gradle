plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://jitpack.io' }
	flatDir {
		dirs "./lib"
	}
}

def urlFile = { url, name, version ->
	File file = new File("$rootDir/lib/${name}-${version}.jar")
	file.parentFile.mkdirs()
	if (!file.exists()) {
		new URL(url).withInputStream { downloadStream ->
			file.withOutputStream { fileOut ->
				fileOut << downloadStream
			}
		}
	}
	return [name: name, version: version]
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

//	implementation urlFile("https://github.com/wasmerio/wasmer-java/releases/download/0.3.0/wasmer-jni-amd64-darwin-0.3.0.jar", "wasmer-jni-amd64-darwin", "0.3.0")
//	implementation urlFile("https://github.com/wasmerio/wasmer-java/releases/download/0.3.0/wasmer-jni-amd64-linux-0.3.0.jar", "wasmer-jni-amd64-linux", "0.3.0")
//	implementation urlFile("https://github.com/wasmerio/wasmer-java/releases/download/0.3.0/wasmer-jni-amd64-windows-0.3.0.jar", "wasmer-jni-amd64-windows", "0.3.0")

	implementation "io.github.kawamuray.wasmtime:wasmtime-java:${project.wasmtime_version}"
	include "io.github.kawamuray.wasmtime:wasmtime-java:${project.wasmtime_version}"

	modImplementation "com.github.wagyourtail:jsmacros:${project.jsmacros_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	//it.options.release = 8
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
